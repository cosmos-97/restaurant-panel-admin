"""init commit

Revision ID: 1a397328776d
Revises: 
Create Date: 2022-10-29 20:21:49.396093

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from app.utils import TSVector

# revision identifiers, used by Alembic.
revision = "1a397328776d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.text('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'))
    op.create_table(
        "user",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=True)
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "alert",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("item_name", sa.String(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("time", sa.Float(), nullable=False),
        sa.Column("action_needed", sa.Text(), nullable=False),
        sa.Column("automatic_ordering", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_alert_id"), "alert", ["id"], unique=True)
    op.create_index(op.f("ix_alert_item_name"), "alert", ["item_name"], unique=False)
    op.create_index(op.f("ix_alert_user_id"), "alert", ["user_id"], unique=False)
    op.create_table(
        "appearance",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("welcome_screen_url", sa.String(), nullable=True),
        sa.Column("logo_url", sa.String(), nullable=True),
        sa.Column("title_1", sa.String(), nullable=True),
        sa.Column("title_2", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_appearance_id"), "appearance", ["id"], unique=True)
    op.create_index(
        op.f("ix_appearance_user_id"), "appearance", ["user_id"], unique=False
    )
    op.create_table(
        "category",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("category_name", sa.String(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_category_category_name"), "category", ["category_name"], unique=False
    )
    op.create_index(op.f("ix_category_id"), "category", ["id"], unique=True)
    op.create_index(op.f("ix_category_user_id"), "category", ["user_id"], unique=False)
    op.create_table(
        "ingredient",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("ingredient_name", sa.String(), nullable=False),
        sa.Column("measuring_unit", sa.String(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_ingredient_id"), "ingredient", ["id"], unique=True)
    op.create_index(
        op.f("ix_ingredient_ingredient_name"),
        "ingredient",
        ["ingredient_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ingredient_user_id"), "ingredient", ["user_id"], unique=False
    )
    op.create_table(
        "option",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("option_name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_option_id"), "option", ["id"], unique=True)
    op.create_index(
        op.f("ix_option_option_name"), "option", ["option_name"], unique=False
    )
    op.create_index(op.f("ix_option_user_id"), "option", ["user_id"], unique=False)
    op.create_table(
        "printer",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("remote_printer_ip", sa.String(), nullable=True),
        sa.Column("port_number", sa.String(), nullable=True),
        sa.Column("queue_name", sa.String(), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_printer_id"), "printer", ["id"], unique=True)
    op.create_index(op.f("ix_printer_user_id"), "printer", ["user_id"], unique=False)
    op.create_table(
        "receipt",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("address_1", sa.String(), nullable=True),
        sa.Column("address_2", sa.String(), nullable=True),
        sa.Column("tax_amount", sa.Float(), nullable=True),
        sa.Column("other_charges", sa.Float(), nullable=True),
        sa.Column("message", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_receipt_id"), "receipt", ["id"], unique=True)
    op.create_index(op.f("ix_receipt_user_id"), "receipt", ["user_id"], unique=False)
    op.create_table(
        "sound",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("incoming_order", sa.String(), nullable=True),
        sa.Column("ready_order", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_sound_id"), "sound", ["id"], unique=True)
    op.create_index(op.f("ix_sound_user_id"), "sound", ["user_id"], unique=False)
    op.create_table(
        "station",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_name", sa.String(), nullable=False),
        sa.Column("channel_name", sa.String(), nullable=False),
        sa.Column("max_time", sa.Integer(), nullable=False),
        sa.Column("statuses", sa.ARRAY(sa.String()), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_station_id"), "station", ["id"], unique=True)
    op.create_index(
        op.f("ix_station_station_name"), "station", ["station_name"], unique=False
    )
    op.create_index(op.f("ix_station_user_id"), "station", ["user_id"], unique=False)
    op.create_table(
        "store_info",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("telephone", sa.String(), nullable=True),
        sa.Column("city", sa.String(), nullable=True),
        sa.Column("address_1", sa.String(), nullable=True),
        sa.Column("address_2", sa.String(), nullable=True),
        sa.Column("state", sa.String(), nullable=True),
        sa.Column("zip_code", sa.String(), nullable=True),
        sa.Column("tax_id", sa.String(), nullable=True),
        sa.Column("store_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_store_info_id"), "store_info", ["id"], unique=True)
    op.create_index(
        op.f("ix_store_info_user_id"), "store_info", ["user_id"], unique=False
    )
    op.create_table(
        "vendor",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vendor_id"), "vendor", ["id"], unique=True)
    op.create_index(op.f("ix_vendor_name"), "vendor", ["name"], unique=False)
    op.create_index(op.f("ix_vendor_user_id"), "vendor", ["user_id"], unique=False)
    op.create_table(
        "beverage",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("beverage_name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_beverage_beverage_name"), "beverage", ["beverage_name"], unique=False
    )
    op.create_index(op.f("ix_beverage_id"), "beverage", ["id"], unique=True)
    op.create_index(
        op.f("ix_beverage_station_id"), "beverage", ["station_id"], unique=False
    )
    op.create_index(op.f("ix_beverage_user_id"), "beverage", ["user_id"], unique=False)
    op.create_table(
        "cold_side",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_cold_side_id"), "cold_side", ["id"], unique=True)
    op.create_index(op.f("ix_cold_side_name"), "cold_side", ["name"], unique=False)
    op.create_index(
        op.f("ix_cold_side_station_id"), "cold_side", ["station_id"], unique=False
    )
    op.create_index(
        op.f("ix_cold_side_user_id"), "cold_side", ["user_id"], unique=False
    )
    op.create_table(
        "combo",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("category_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("size", sa.String(), nullable=True),
        sa.Column("quantity_sides", sa.Integer(), nullable=True),
        sa.Column("quantity_sauces", sa.Integer(), nullable=True),
        sa.Column("discount_beverage", sa.Boolean(), nullable=False),
        sa.Column("price_beverage", sa.Float(), nullable=True),
        sa.Column("discount_dessert", sa.Boolean(), nullable=False),
        sa.Column("price_dessert", sa.Float(), nullable=True),
        sa.Column("special_instructions", sa.Boolean(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column("notify_after_orders", sa.Integer(), nullable=False),
        sa.Column(
            "__ts_vector__",
            TSVector(),
            sa.Computed(
                "to_tsvector('english', name || ' ' || description)", persisted=True
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_combo___ts_vector__",
        "combo",
        ["__ts_vector__"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_combo_id"), "combo", ["id"], unique=True)
    op.create_index(op.f("ix_combo_name"), "combo", ["name"], unique=False)
    op.create_index(op.f("ix_combo_station_id"), "combo", ["station_id"], unique=False)
    op.create_index(op.f("ix_combo_user_id"), "combo", ["user_id"], unique=False)
    op.create_table(
        "dessert",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("dessert_name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_dessert_dessert_name"), "dessert", ["dessert_name"], unique=False
    )
    op.create_index(op.f("ix_dessert_id"), "dessert", ["id"], unique=True)
    op.create_index(
        op.f("ix_dessert_station_id"), "dessert", ["station_id"], unique=False
    )
    op.create_index(op.f("ix_dessert_user_id"), "dessert", ["user_id"], unique=False)
    op.create_table(
        "hot_side",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_hot_side_id"), "hot_side", ["id"], unique=True)
    op.create_index(op.f("ix_hot_side_name"), "hot_side", ["name"], unique=False)
    op.create_index(
        op.f("ix_hot_side_station_id"), "hot_side", ["station_id"], unique=False
    )
    op.create_index(op.f("ix_hot_side_user_id"), "hot_side", ["user_id"], unique=False)
    op.create_table(
        "item",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("category_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("special_instructions", sa.Boolean(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("size", sa.String(), nullable=True),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column("notify_after_orders", sa.Integer(), nullable=False),
        sa.Column(
            "__ts_vector__",
            TSVector(),
            sa.Computed(
                "to_tsvector('english', name || ' ' || description)", persisted=True
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_item___ts_vector__",
        "item",
        ["__ts_vector__"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_item_id"), "item", ["id"], unique=True)
    op.create_index(op.f("ix_item_name"), "item", ["name"], unique=False)
    op.create_index(op.f("ix_item_station_id"), "item", ["station_id"], unique=False)
    op.create_index(op.f("ix_item_user_id"), "item", ["user_id"], unique=False)
    op.create_table(
        "order",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "order_type", sa.Enum("DineIn", "TakeOut", name="ordertype"), nullable=False
        ),
        sa.Column("guest_name", sa.String(), nullable=False),
        sa.Column("option_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("special_instructions", sa.String(), nullable=True),
        sa.Column("card_number", sa.Numeric(), nullable=False),
        sa.Column("card_type", sa.String(), nullable=False),
        sa.Column("reference_number", sa.String(), nullable=False),
        sa.Column("authorization", sa.String(), nullable=False),
        sa.Column("entry_mode", sa.String(), nullable=False),
        sa.Column("application_name", sa.String(), nullable=False),
        sa.Column("application_label", sa.String(), nullable=False),
        sa.Column("aid", sa.String(), nullable=False),
        sa.Column("tc_pimverified", sa.String(), nullable=False),
        sa.Column("pin_verified", sa.Boolean(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["option_id"],
            ["option.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_guest_name"), "order", ["guest_name"], unique=False)
    op.create_index(op.f("ix_order_id"), "order", ["id"], unique=False)
    op.create_table(
        "request",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("vendor_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("product", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("quantity", sa.Float(), nullable=False),
        sa.Column("unit", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vendor_id"],
            ["vendor.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_request_id"), "request", ["id"], unique=False)
    op.create_index(op.f("ix_request_user_id"), "request", ["user_id"], unique=False)
    op.create_index(
        op.f("ix_request_vendor_id"), "request", ["vendor_id"], unique=False
    )
    op.create_table(
        "sauce",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("sauce_name", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_sauce_id"), "sauce", ["id"], unique=True)
    op.create_index(op.f("ix_sauce_sauce_name"), "sauce", ["sauce_name"], unique=False)
    op.create_index(op.f("ix_sauce_station_id"), "sauce", ["station_id"], unique=False)
    op.create_index(op.f("ix_sauce_user_id"), "sauce", ["user_id"], unique=False)
    op.create_table(
        "special",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("category_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("size", sa.String(), nullable=False),
        sa.Column("quantity_sides", sa.Integer(), nullable=True),
        sa.Column("quantity_sauces", sa.Integer(), nullable=True),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("discount_beverage", sa.Boolean(), nullable=False),
        sa.Column("price_beverage", sa.Float(), nullable=False),
        sa.Column("discount_dessert", sa.Boolean(), nullable=False),
        sa.Column("price_dessert", sa.Float(), nullable=False),
        sa.Column("special_instructions", sa.Boolean(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=False),
        sa.Column("is_archived", sa.Boolean(), nullable=False),
        sa.Column("notify_after_orders", sa.Integer(), nullable=False),
        sa.Column(
            "__ts_vector__",
            TSVector(),
            sa.Computed(
                "to_tsvector('english', name || ' ' || description)", persisted=True
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["station_id"],
            ["station.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_special___ts_vector__",
        "special",
        ["__ts_vector__"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_special_id"), "special", ["id"], unique=True)
    op.create_index(op.f("ix_special_name"), "special", ["name"], unique=False)
    op.create_index(
        op.f("ix_special_station_id"), "special", ["station_id"], unique=False
    )
    op.create_index(op.f("ix_special_user_id"), "special", ["user_id"], unique=False)
    op.create_table(
        "user_alert",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("alert_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["alert_id"], ["alert.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "alert_id"),
    )
    op.create_table(
        "user_station",
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "station_id"),
    )
    op.create_table(
        "vendor_category",
        sa.Column("vendor_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("category_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["category.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["vendor_id"], ["vendor.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("vendor_id", "category_id"),
    )
    op.create_table(
        "combo_beverage",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("beverage_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["beverage_id"], ["beverage.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "beverage_id"),
    )
    op.create_table(
        "combo_cold_side",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("cold_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["cold_side_id"], ["cold_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "cold_side_id"),
    )
    op.create_table(
        "combo_dessert",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("dessert_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["dessert_id"], ["dessert.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "dessert_id"),
    )
    op.create_table(
        "combo_hot_side",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("hot_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["hot_side_id"], ["hot_side.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "hot_side_id"),
    )
    op.create_table(
        "combo_ingredient",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("ingredient_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["ingredient_id"], ["ingredient.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("combo_id", "ingredient_id"),
    )
    op.create_table(
        "combo_item",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "item_id"),
    )
    op.create_table(
        "combo_option",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("option_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["option_id"], ["option.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "option_id"),
    )
    op.create_table(
        "combo_sauce",
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sauce_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sauce_id"], ["sauce.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("combo_id", "sauce_id"),
    )
    op.create_table(
        "item_cold_side",
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("cold_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["cold_side_id"], ["cold_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "cold_side_id"),
    )
    op.create_table(
        "item_hot_side",
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("hot_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["hot_side_id"], ["hot_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "hot_side_id"),
    )
    op.create_table(
        "item_ingredient",
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("ingredient_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["ingredient_id"], ["ingredient.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "ingredient_id"),
    )
    op.create_table(
        "item_option",
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("option_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["option_id"], ["option.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "option_id"),
    )
    op.create_table(
        "item_sauce",
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sauce_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sauce_id"], ["sauce.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("item_id", "sauce_id"),
    )
    op.create_table(
        "order_station_beverage",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("beverage_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["beverage_id"], ["beverage.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "beverage_id"),
    )
    op.create_index(
        op.f("ix_order_station_beverage_id"),
        "order_station_beverage",
        ["id"],
        unique=True,
    )
    op.create_table(
        "order_station_cold_side",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("cold_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("cold_side_size", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["cold_side_id"], ["cold_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "cold_side_id"),
    )
    op.create_index(
        op.f("ix_order_station_cold_side_id"),
        "order_station_cold_side",
        ["id"],
        unique=True,
    )
    op.create_table(
        "order_station_combo",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "combo_id"),
    )
    op.create_index(
        op.f("ix_order_station_combo_id"), "order_station_combo", ["id"], unique=True
    )
    op.create_table(
        "order_station_dessert",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("dessert_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["dessert_id"], ["dessert.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "dessert_id"),
    )
    op.create_index(
        op.f("ix_order_station_dessert_id"),
        "order_station_dessert",
        ["id"],
        unique=True,
    )
    op.create_table(
        "order_station_hot_side",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("hot_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("hot_side_size", sa.String(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["hot_side_id"], ["hot_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "hot_side_id"),
    )
    op.create_index(
        op.f("ix_order_station_hot_side_id"),
        "order_station_hot_side",
        ["id"],
        unique=True,
    )
    op.create_table(
        "order_station_item",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "item_id"),
    )
    op.create_index(
        op.f("ix_order_station_item_id"), "order_station_item", ["id"], unique=True
    )
    op.create_table(
        "order_station_sauce",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sauce_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sauce_id"], ["sauce.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "sauce_id"),
    )
    op.create_index(
        op.f("ix_order_station_sauce_id"), "order_station_sauce", ["id"], unique=True
    )
    op.create_table(
        "order_station_special",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("order_id", sa.BigInteger(), nullable=False),
        sa.Column("station_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("status", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(["order_id"], ["order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["station_id"], ["station.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "order_id", "station_id", "special_id"),
    )
    op.create_index(
        op.f("ix_order_station_special_id"),
        "order_station_special",
        ["id"],
        unique=True,
    )
    op.create_table(
        "special_beverage",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("beverage_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["beverage_id"], ["beverage.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "beverage_id"),
    )
    op.create_table(
        "special_cold_side",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("cold_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["cold_side_id"], ["cold_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "cold_side_id"),
    )
    op.create_table(
        "special_combo",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("combo_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["combo_id"], ["combo.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "combo_id"),
    )
    op.create_table(
        "special_dessert",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("dessert_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["dessert_id"], ["dessert.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "dessert_id"),
    )
    op.create_table(
        "special_hot_side",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("hot_side_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["hot_side_id"], ["hot_side.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "hot_side_id"),
    )
    op.create_table(
        "special_ingredient",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("ingredient_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["ingredient_id"], ["ingredient.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "ingredient_id"),
    )
    op.create_table(
        "special_item",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("item_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["item_id"], ["item.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "item_id"),
    )
    op.create_table(
        "special_option",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("option_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["option_id"], ["option.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "option_id"),
    )
    op.create_table(
        "special_sauce",
        sa.Column("special_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("sauce_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(["sauce_id"], ["sauce.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["special_id"], ["special.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("special_id", "sauce_id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("special_sauce")
    op.drop_table("special_option")
    op.drop_table("special_item")
    op.drop_table("special_ingredient")
    op.drop_table("special_hot_side")
    op.drop_table("special_dessert")
    op.drop_table("special_combo")
    op.drop_table("special_cold_side")
    op.drop_table("special_beverage")
    op.drop_index(
        op.f("ix_order_station_special_id"), table_name="order_station_special"
    )
    op.drop_table("order_station_special")
    op.drop_index(op.f("ix_order_station_sauce_id"), table_name="order_station_sauce")
    op.drop_table("order_station_sauce")
    op.drop_index(op.f("ix_order_station_item_id"), table_name="order_station_item")
    op.drop_table("order_station_item")
    op.drop_index(
        op.f("ix_order_station_hot_side_id"), table_name="order_station_hot_side"
    )
    op.drop_table("order_station_hot_side")
    op.drop_index(
        op.f("ix_order_station_dessert_id"), table_name="order_station_dessert"
    )
    op.drop_table("order_station_dessert")
    op.drop_index(op.f("ix_order_station_combo_id"), table_name="order_station_combo")
    op.drop_table("order_station_combo")
    op.drop_index(
        op.f("ix_order_station_cold_side_id"), table_name="order_station_cold_side"
    )
    op.drop_table("order_station_cold_side")
    op.drop_index(
        op.f("ix_order_station_beverage_id"), table_name="order_station_beverage"
    )
    op.drop_table("order_station_beverage")
    op.drop_table("item_sauce")
    op.drop_table("item_option")
    op.drop_table("item_ingredient")
    op.drop_table("item_hot_side")
    op.drop_table("item_cold_side")
    op.drop_table("combo_sauce")
    op.drop_table("combo_option")
    op.drop_table("combo_item")
    op.drop_table("combo_ingredient")
    op.drop_table("combo_hot_side")
    op.drop_table("combo_dessert")
    op.drop_table("combo_cold_side")
    op.drop_table("combo_beverage")
    op.drop_table("vendor_category")
    op.drop_table("user_station")
    op.drop_table("user_alert")
    op.drop_index(op.f("ix_special_user_id"), table_name="special")
    op.drop_index(op.f("ix_special_station_id"), table_name="special")
    op.drop_index(op.f("ix_special_name"), table_name="special")
    op.drop_index(op.f("ix_special_id"), table_name="special")
    op.drop_index(
        "ix_special___ts_vector__", table_name="special", postgresql_using="gin"
    )
    op.drop_table("special")
    op.drop_index(op.f("ix_sauce_user_id"), table_name="sauce")
    op.drop_index(op.f("ix_sauce_station_id"), table_name="sauce")
    op.drop_index(op.f("ix_sauce_sauce_name"), table_name="sauce")
    op.drop_index(op.f("ix_sauce_id"), table_name="sauce")
    op.drop_table("sauce")
    op.drop_index(op.f("ix_request_vendor_id"), table_name="request")
    op.drop_index(op.f("ix_request_user_id"), table_name="request")
    op.drop_index(op.f("ix_request_id"), table_name="request")
    op.drop_table("request")
    op.drop_index(op.f("ix_order_id"), table_name="order")
    op.drop_index(op.f("ix_order_guest_name"), table_name="order")
    op.drop_table("order")
    op.drop_index(op.f("ix_item_user_id"), table_name="item")
    op.drop_index(op.f("ix_item_station_id"), table_name="item")
    op.drop_index(op.f("ix_item_name"), table_name="item")
    op.drop_index(op.f("ix_item_id"), table_name="item")
    op.drop_index("ix_item___ts_vector__", table_name="item", postgresql_using="gin")
    op.drop_table("item")
    op.drop_index(op.f("ix_hot_side_user_id"), table_name="hot_side")
    op.drop_index(op.f("ix_hot_side_station_id"), table_name="hot_side")
    op.drop_index(op.f("ix_hot_side_name"), table_name="hot_side")
    op.drop_index(op.f("ix_hot_side_id"), table_name="hot_side")
    op.drop_table("hot_side")
    op.drop_index(op.f("ix_dessert_user_id"), table_name="dessert")
    op.drop_index(op.f("ix_dessert_station_id"), table_name="dessert")
    op.drop_index(op.f("ix_dessert_id"), table_name="dessert")
    op.drop_index(op.f("ix_dessert_dessert_name"), table_name="dessert")
    op.drop_table("dessert")
    op.drop_index(op.f("ix_combo_user_id"), table_name="combo")
    op.drop_index(op.f("ix_combo_station_id"), table_name="combo")
    op.drop_index(op.f("ix_combo_name"), table_name="combo")
    op.drop_index(op.f("ix_combo_id"), table_name="combo")
    op.drop_index("ix_combo___ts_vector__", table_name="combo", postgresql_using="gin")
    op.drop_table("combo")
    op.drop_index(op.f("ix_cold_side_user_id"), table_name="cold_side")
    op.drop_index(op.f("ix_cold_side_station_id"), table_name="cold_side")
    op.drop_index(op.f("ix_cold_side_name"), table_name="cold_side")
    op.drop_index(op.f("ix_cold_side_id"), table_name="cold_side")
    op.drop_table("cold_side")
    op.drop_index(op.f("ix_beverage_user_id"), table_name="beverage")
    op.drop_index(op.f("ix_beverage_station_id"), table_name="beverage")
    op.drop_index(op.f("ix_beverage_id"), table_name="beverage")
    op.drop_index(op.f("ix_beverage_beverage_name"), table_name="beverage")
    op.drop_table("beverage")
    op.drop_index(op.f("ix_vendor_user_id"), table_name="vendor")
    op.drop_index(op.f("ix_vendor_name"), table_name="vendor")
    op.drop_index(op.f("ix_vendor_id"), table_name="vendor")
    op.drop_table("vendor")
    op.drop_index(op.f("ix_store_info_user_id"), table_name="store_info")
    op.drop_index(op.f("ix_store_info_id"), table_name="store_info")
    op.drop_table("store_info")
    op.drop_index(op.f("ix_station_user_id"), table_name="station")
    op.drop_index(op.f("ix_station_station_name"), table_name="station")
    op.drop_index(op.f("ix_station_id"), table_name="station")
    op.drop_table("station")
    op.drop_index(op.f("ix_sound_user_id"), table_name="sound")
    op.drop_index(op.f("ix_sound_id"), table_name="sound")
    op.drop_table("sound")
    op.drop_index(op.f("ix_receipt_user_id"), table_name="receipt")
    op.drop_index(op.f("ix_receipt_id"), table_name="receipt")
    op.drop_table("receipt")
    op.drop_index(op.f("ix_printer_user_id"), table_name="printer")
    op.drop_index(op.f("ix_printer_id"), table_name="printer")
    op.drop_table("printer")
    op.drop_index(op.f("ix_option_user_id"), table_name="option")
    op.drop_index(op.f("ix_option_option_name"), table_name="option")
    op.drop_index(op.f("ix_option_id"), table_name="option")
    op.drop_table("option")
    op.drop_index(op.f("ix_ingredient_user_id"), table_name="ingredient")
    op.drop_index(op.f("ix_ingredient_ingredient_name"), table_name="ingredient")
    op.drop_index(op.f("ix_ingredient_id"), table_name="ingredient")
    op.drop_table("ingredient")
    op.drop_index(op.f("ix_category_user_id"), table_name="category")
    op.drop_index(op.f("ix_category_id"), table_name="category")
    op.drop_index(op.f("ix_category_category_name"), table_name="category")
    op.drop_table("category")
    op.drop_index(op.f("ix_appearance_user_id"), table_name="appearance")
    op.drop_index(op.f("ix_appearance_id"), table_name="appearance")
    op.drop_table("appearance")
    op.drop_index(op.f("ix_alert_user_id"), table_name="alert")
    op.drop_index(op.f("ix_alert_item_name"), table_name="alert")
    op.drop_index(op.f("ix_alert_id"), table_name="alert")
    op.drop_table("alert")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_table("user")
    # ### end Alembic commands ###
